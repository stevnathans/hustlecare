generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String     @id @default(uuid())
  name                String
  email               String     @unique
  phone               String?
  password            String?
  emailVerified       DateTime?
  image               String?
  role                String     @default("user")
  
  // Notification preferences
  emailNotifications  Boolean    @default(true)
  pushNotifications   Boolean    @default(false)
  marketingEmails     Boolean    @default(true)
  
  carts               Cart[]
  businesses          Business[] // Track which businesses user has interacted with
  comments            Comment[]
  reviews             Review[]
  accounts            Account[]  // For NextAuth adapter
  sessions            Session[]  // For NextAuth adapter
  searches            SearchLog[] // Track user searches
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Cart {
  id         String     @id @default(uuid())
  name       String?
  userId     String
  businessId Int
  user       User       @relation(fields: [userId], references: [id])
  business   Business   @relation(fields: [businessId], references: [id])
  items      CartItem[] // each cart has many items
  totalCost  Float? // computed and stored when saving
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@unique([userId, businessId]) // Prevent duplicate carts per business
}

model CartItem {
  id        String @id @default(uuid())
  cartId    String
  productId Int
  quantity  Int    @default(1)
  unitPrice Float // price at the time of adding to cart
  category        String?  @default("Uncategorized")
  requirementName String?  @default("Unspecified Requirement")
  cart    Cart    @relation(fields: [cartId], references: [id])
  product Product @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([cartId, productId])
  @@index([cartId])
}

model Business {
  id           Int           @id @default(autoincrement())
  slug         String        @unique
  name         String
  description  String?
  image        String?
  published    Boolean       @default(true) 
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  requirements Requirement[]
  carts         Cart[]
  searches      SearchLog[]
  user         User?         @relation(fields: [userId], references: [id])
  userId       String?

  @@index([name])
}

model Requirement {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  image       String?
  category    String?
  necessity   String
  businessId  Int
  business    Business  @relation(fields: [businessId], references: [id])
  comments    Comment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Comment {
  id            Int         @id @default(autoincrement())
  content       String
  requirementId Int
  userId        String
  requirement   Requirement @relation(fields: [requirementId], references: [id])
  user          User        @relation(fields: [userId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Product {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  price       Float?
  image       String?
  url         String?    // Added product URL field
  vendorId    Int?
  vendor      Vendor?    @relation(fields: [vendorId], references: [id])
  cartItems   CartItem[]
  reviews     Review[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Review {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vendor {
  id        Int       @id @default(autoincrement())
  name      String
  website   String?
  logo      String?
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([name, website])
}

// New model for tracking searches
model SearchLog {
  id         String    @id @default(uuid())
  keyword    String
  location   String?
  userId     String?   // Optional - for logged in users
  businessId Int?      // Track which business was clicked from search
  ipAddress  String?   // For anonymous tracking
  userAgent  String?   // Browser info
  resultCount Int?     // How many results were returned
  user       User?     @relation(fields: [userId], references: [id])
  business   Business? @relation(fields: [businessId], references: [id])
  createdAt  DateTime  @default(now())

  @@index([keyword]) // Index for analytics queries
  @@index([createdAt]) // Index for time-based queries
}